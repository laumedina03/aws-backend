# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Deploy

on:
  push: 
    branches: [ main ]

jobs:
  Deploy:
    name: Deploy to EC2 
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Test MySQL connection
        run: |
          python -c "import mysql.connector; mysql.connector.connect(
            host='${{ secrets.DB_HOST }}',
            user='${{ secrets.DB_USER }}',
            password='${{ secrets.DB_PASSWORD }}',
            database='${{ secrets.DB_NAME }}')"
          
      - name: Run unit tests
        env:
          FLASK_ENV: testing  # Define el entorno como testing
        run: |
          python -m unittest discover -s tests -p "*.py"

          
      - name: Deploy to EC2 Instance
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.BACKEND_SSH_HOST }}
          EC2_USER: ${{ secrets.USER_NAME }}
          APP_DIR: /home/ubuntu/aws-backend  
          APP_FILE: app.py
          ENVIRONMENT: production
      
        run: |
          echo "$EC2_PRIVATE_KEY" > ec2_key && chmod 600 ec2_key
          ssh -o StrictHostKeyChecking=no -i ec2_key ${EC2_USER}@${SERVER_IP} '
              # Acceder al directorio del proyecto
              cd aws-backend && ls || exit 1

              # Activar el entorno virtual
              source env/bin/activate || exit 2

              # Actualizar el código desde la rama dev
              git fetch --all || exit 3
              git reset --hard origin/main || exit 4
              git pull origin main || exit 5

              # Instalar dependencias necesarias
              #pip install -r requirements.txt &&

              # Detener cualquier proceso que esté usando el puerto 5000
              #sudo fuser -k 5000/tcp || exit 6

              # Run the POST request test
              #python -c "from app import test_add_user; test_add_user()"

              # Ejecutar la aplicación Flask
              gunicorn -b 0.0.0.0:5000 app:app --daemon || exit 7

              # Desactivar el entorno virtual
              
              '
